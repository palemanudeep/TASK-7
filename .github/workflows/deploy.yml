name: Deploy Medusa to EC2 and Push Docker Image to ECR

on:
  workflow_dispatch:  # Trigger manually from GitHub Actions

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1 # Permanent AWS region

      - name: Create EC2 Instance and ECR Repository
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Get EC2 Public IP and ECR URL
        id: ec2_info
        run: |
          echo "EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV

      - name: Update and Install Dependencies
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=60 ubuntu@${{ env.EC2_PUBLIC_IP }} << 'EOF'
            # Update and install necessary packages
            sudo apt-get update -y
            sudo apt-get upgrade -y
            # Install Docker
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            
            # Install Docker
            sudo apt-get install -y docker.io
            
            # Install Node.js 18.x
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt install -y nodejs
            
            # Install PostgreSQL
            sudo apt install -y postgresql postgresql-contrib
            sudo systemctl start postgresql
            sudo systemctl enable postgresql

            # Create PostgreSQL database and user
            sudo -u postgres psql -c "CREATE USER medusabackend WITH PASSWORD 'medusa123' CREATEDB;"
            sudo -u postgres psql -c "CREATE DATABASE medusabackend OWNER medusabackend;"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE medusabackend TO medusabackend;"

            # Install Redis
            sudo apt install -y redis-server
            sudo systemctl enable redis-server
            sudo systemctl start redis-server

            # Clone the Medusa app repository
            if [ -d "./my-app-store" ]; then
              echo "Directory ./my-app-store exists. Deleting it..."
              sudo rm -rf ./my-app-store
            fi

            echo "Cloning the repository..."
            git clone https://github.com/palemanudeep/TASK-1.git ./my-app-store

            cd ./my-app-store

            # Set up .env file
            touch .env
            echo "DATABASE_URL=postgres://medusabackend:medusa123@localhost:5432/medusabackend" > .env
            echo "REDIS_URL=redis://localhost:6379" >> .env

            # Install Medusa dependencies
            sudo npm install -g @medusajs/medusa-cli
            npm install
            npm install cross-env --save-dev

            # Run database migrations
            npx medusa migrations run

            # Create Medusa admin user
            npx medusa user -e anudeep@gmail.com -p anudeep123
            
            # Kill any process running on port 9000
            if lsof -i :9000; then
              echo "Killing process running on port 9000..."
              lsof -ti:9000 | xargs kill -9
            fi

            # Start the Medusa application in the background
            nohup sudo npm run start &> medusa.log &

            echo "Medusa deployment initiated."

            # Create Dockerfile
            cat << 'EOF2' > Dockerfile
            FROM node:hydrogen-alpine3.20

            # Set the working directory inside the container
            WORKDIR /app

            # Copy package.json and package-lock.json to leverage Docker's caching
            COPY package.json ./ 

            # Install dependencies and Medusa CLI globally
            RUN npm install && npm install -g @medusajs/medusa-cli@latest

            # Copy the rest of the application code
            COPY . .

            # Expose the ports the application will run on
            EXPOSE 7001
            EXPOSE 9000

            # Command to run Medusa when the container starts
            CMD ["medusa", "start"]
            EOF2

            # Build the Docker image
            sudo docker build -t medusa_app:latest .

            # Install AWS CLI to push to ECR
            sudo apt-get install -y awscli

            # Login to ECR
            aws ecr get-login-password --region ap-south-1 | sudo docker login --username AWS --password-stdin 440744245577.dkr.ecr.ap-south-1.amazonaws.com

            # Tag the Docker image
            sudo docker tag medusa_app:latest 440744245577.dkr.ecr.ap-south-1.amazonaws.com/medusa-ecr:latest

            # Push the Docker image to ECR
            sudo docker push 440744245577.dkr.ecr.ap-south-1.amazonaws.com/medusa-ecr:latest

            echo "Medusa Docker image built and pushed to ECR."
          EOF
